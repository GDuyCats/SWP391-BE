import { DataTypes } from "sequelize";

export const createPostModel = (sequelize) => {
  const Post = sequelize.define(
    "Posts",
    {
      id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },

      // üëâ NEW: ƒë·∫£m b·∫£o b√†i thu·ªôc v·ªÅ 1 user (controller c·ªßa b·∫°n ƒëang d√πng userId)
      userId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: { model: "Users", key: "id" },
        onDelete: "CASCADE",
      },

      title: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      content: {
        type: DataTypes.TEXT,
        allowNull: false,
      },
      image: {
        type: DataTypes.ARRAY(DataTypes.STRING), // l∆∞u URL ho·∫∑c ƒë∆∞·ªùng d·∫´n
        allowNull: true,
      },
      thumbnail: {
        type: DataTypes.STRING,
        allowNull: true,
      },
      price: {
        type: DataTypes.DECIMAL(15, 2), // v√≠ d·ª•: 999999999999.99
        allowNull: false,
        defaultValue: 0,
      },
      phone: {
        type: DataTypes.STRING,
        allowNull: true,
        validate: {
          is: /^(?:\+84|0)(?:\d{9,10})$/, // gi·ªëng validate phone trong user
        },
      },

      // ===== VIP theo b√†i =====
      isVip: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false,
        comment:
          "B√†i VIP trong kho·∫£ng th·ªùi gian; khi h·∫øt h·∫°n cron s·∫Ω set false + nonverify + isActive=false",
      },
      vipExpiresAt: {
        type: DataTypes.DATE,
        allowNull: true,
      },
      vipTier: {
        type: DataTypes.ENUM("diamond", "gold", "silver"),
        allowNull: true,
      },
      vipPriority: {
        type: DataTypes.INTEGER,
        allowNull: false,
        defaultValue: 0, // 3 > 2 > 1 > 0
      },

      // üëâ NEW: tham chi·∫øu g√≥i ƒë√£ ch·ªçn khi ƒëƒÉng (VipPlans)
      vipPlanId: {
        type: DataTypes.INTEGER,
        allowNull: true,
        references: { model: "VipPlans", key: "id" },
        onDelete: "SET NULL",
        comment: "G√≥i VIP ƒë∆∞·ª£c √°p v√†o b√†i n√†y",
      },

      // Tr·∫°ng th√°i hi·ªÉn th·ªã c√¥ng khai
      isActive: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: true,
        comment: "false => ·∫©n kh·ªèi public (h·∫øt h·∫°n VIP / b·ªã g·ª°)",
      },

      verifyStatus: {
        type: DataTypes.ENUM("verify", "nonverify"),
        allowNull: false,
        defaultValue: "nonverify",
      },
      category: {
        type: DataTypes.ENUM("battery", "vehicle"),
        allowNull: false,
        defaultValue: "vehicle", // m·∫∑c ƒë·ªãnh l√† vehicle
      },
    },
    {
      // üëâ NEW: index ƒë·ªÉ t·ªëi ∆∞u filter/sort theo lu·ªìng m·ªõi
      indexes: [
        { fields: ["isActive"] },
        { fields: ["verifyStatus"] },
        { fields: ["category"] },
        { fields: ["price"] },
        { fields: ["userId"] },
        { fields: ["vipPlanId"] },
        { fields: ["vipPriority"] },
        { fields: ["vipExpiresAt"] },
        // l·ªçc VIP c√≤n h·∫°n nhanh
        { fields: ["isVip", "vipExpiresAt", "vipPriority"] },
        // s·∫Øp x·∫øp m·∫∑c ƒë·ªãnh theo th·ªùi gian
        { fields: ["createdAt"] },
      ],

      // üëâ NEW: r√†ng bu·ªôc nh·∫π ƒë·ªÉ tr√°nh tr·∫°ng th√°i VIP sai
      validate: {
        vipConsistency() {
          if (this.isVip) {
            if (!this.vipExpiresAt) {
              throw new Error("vipExpiresAt is required when isVip = true");
            }
            if (!this.vipPriority || this.vipPriority < 1) {
              throw new Error("vipPriority must be >= 1 when isVip = true");
            }
            if (!this.vipTier) {
              throw new Error("vipTier is required when isVip = true");
            }
          }
        },
      },
    }
  );

  return Post;
};
